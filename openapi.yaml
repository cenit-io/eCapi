openapi: 3.0.0
info:
  version: v1
  title: eCapi
  termsOfService: 'https://example.com/terms/'
  contact:
    email: support@cenit.io
    url: 'https://cenitio.slack.com/messages/support'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://cenit.io/assets/cenit-logo-c4e099552f7dc77c1870b7c77600380177da8b01c0a4a70dbf608b73e61da3ce.png'
  description: |
    # Introduction
    * The eCommerce's API is built over REST services on HTTPS.
    * It has predictable resource URLs.
    * It returns HTTP response codes to indicate errors.
    * It also accepts and returns JSON in the HTTP body.
    * You can use your favorite HTTP/REST library for your programming language to use eCommerce's API,
    # Authentication
    TODO: ...
tags:
  - name: Store
    description: Operations about store
  - name: Order
    description: Operations about orders
  - name: Tasks
    description: Operations about tasks
servers:
  - url: 'https://cenit.io/app/ecapi'
paths:
  /orders:
    get:
      tags:
        - Order
      operationId: getOrders
      summary: Get orders
      description: |
        Returns the list of orders settings.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                  - order_id: ...
                    last_import_date: '2019-06-07T20:47:14+00:00'
                    created_at: '2019-06-07T00:06:52+00:00'
                    updated_at: '2019-06-07T20:47:32+00:00'
                  - order_id: ...
                    last_import_date: '2019-06-07T20:47:14+00:00'
                    created_at: '2019-06-07T00:06:52+00:00'
                    updated_at: '2019-06-07T20:47:32+00:00'
                pagination:
                  offset: 0
                  limit: 10
                  total: 2
  /stores:
    get:
      tags:
        - Store
      operationId: getStores
      summary: Get stores
      description: |
        Returns the list of stores settings.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Store'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                  - id: shop_01
                    name: Shop-01
                    channel: LazadaSG
                    authorized: true
                    last_import_orders_date: '2019-06-07T20:47:14+00:00'
                    created_at: '2019-06-07T00:06:52+00:00'
                    updated_at: '2019-06-07T20:47:32+00:00'
                  - id: shop_02
                    name: Shop-02
                    channel: LazadaMY
                    authorized: true
                    last_import_orders_date: '2019-07-07T20:47:14+00:00'
                    created_at: '2019-07-07T00:06:52+00:00'
                    updated_at: '2019-07-07T20:47:32+00:00'
                pagination:
                  offset: 0
                  limit: 10
                  total: 2
    post:
      tags:
        - Store
      operationId: createStoreById
      summary: Create store
      description: |
        Create store settings from a given name and channel.
      responses:
        '200':
          $ref: '#/components/responses/StoreItem'
        '400':
          $ref: '#/components/responses/AlreadyExists'
  '/stores/{id}':
    get:
      tags:
        - Store
      operationId: getStoreSettings
      summary: Get store
      description: |
        Find store settings by given id and returns it.
      responses:
        '200':
          $ref: '#/components/responses/StoreItem'
        '404':
          $ref: '#/components/responses/StoreNotFound'
    delete:
      tags:
        - Store
      operationId: deleteStoreSettings
      summary: Destroy store
      description: |
        Find store settings by given id and destroy it.

        ~~~
        Only unauthorize stores can be destroyed.
        ~~~
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/StoreNotFound'
  '/stores/{id}/authorize':
    parameters:
      - name: redirect_uri
        in: query
        schema:
          $ref: '#/components/schemas/RedirectURI'
    get:
      tags:
        - Store
      operationId: authorizeStoreConnection
      summary: Authorize store
      description: |
        Find store settings by given id and redirect navigation to authorization uri.
      parameters:
        - redirect_uri:
            $ref: '#/components/schemas/RedirectURI'
      responses:
        '404':
          $ref: '#/components/responses/StoreNotFound'
  '/stores/{id}/destroy':
    get:
      tags:
        - Store
      operationId: destroyStoreSettings
      summary: Destroy store
      description: |
        Find store settings by given id and destroy it.

        ~~~
        Only unauthorize stores can be destroyed.
        ~~~
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/StoreNotFound'
  '/stores/{id}/unauthorize':
    get:
      tags:
        - Store
      operationId: unauthorizeStoreConnection
      summary: Cancel authorization
      description: |
        Find store settings by given id and disallow their connection.

        ~~~
        Only authorize stores can be unauthorizes.
        ~~~
      responses:
        '404':
          $ref: '#/components/responses/StoreNotFound'
components:
  schemas:
    Address:
      title: Address
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        country:
          type: string
        state:
          type: string
        city:
          type: string
        district:
          type: string
        town:
          type: string
        phone:
          type: string
        zip_code:
          type: string
        address:
          type: array
          items:
            type: string
    CreatedAt:
      description: Date in iso8601 when the record was created
      type: string
      format: date-time
    Customer:
      title: Customer
      type: object
      properties:
        customer_id:
          type: string
          title: Id
          description: Unique identifier for the customer
        firstname:
          type: string
          description: Customers first name
        lastname:
          type: string
          description: Customers last name
    LineItem:
      title: LineItem
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        quantity:
          type: integer
        price:
          type: number
        sku:
          type: string
        product_id:
          type: string
    Order:
      title: Order
      type: object
      properties:
        order_id:
          type: string
        number:
          type: string
        total_price:
          type: string
        total_quantity:
          type: integer
        status:
          type: string
        payment_method:
          type: string
        ship_address:
          $ref: '#/components/schemas/Address'
        bill_address:
          $ref: '#/components/schemas/Address'
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        hmac:
          type: string
        created_date:
          description: Date in iso8601 when the order was created
          type: string
          format: date-time
        updated_date:
          description: Date in iso8601 when the order was updated
          type: string
          format: date-time
        last_import_date:
          type: string
          format: date-time
        customer:
          $ref: '#/components/schemas/Customer'
        store:
          $ref: '#/components/schemas/Store'
    Pagination:
      type: object
      properties:
        offset:
          description: Offset
          type: integer
        limit:
          description: Limit
          type: integer
        total:
          description: Limit
          type: integer
    RedirectURI:
      description: URI to back after do authorization
      type: string
    Store:
      type: object
      properties:
        id:
          description: Store identifier
          type: string
          example: shop_01
        name:
          description: Store name
          type: string
        channel:
          description: Channel identifier
          type: string
          example: LazadaSG
        authorized:
          description: If store is authorized or not
          type: boolean
        last_import_orders_date:
          description: The last import orders date
          type: string
          format: date-time
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      required:
        - name
        - channel
    Success:
      type: object
      properties:
        success:
          description: Success status
          type: boolean
          example: false
        message:
          description: Error or Success message
          type: string
          example: '[404] - Not found store with id: shop_20'
    UpdatedAt:
      description: Date in iso8601 when the record was updated
      type: string
      format: date-time
  responses:
    AlreadyExists:
      description: Already exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
          example:
            success: false
            message: Already exist
    StoreItem:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Store'
          example:
            data:
              id: shop_01
              name: Shop-01
              channel: LazadaSG
              authorized: true
              last_import_orders_date: '2019-06-07T20:47:14+00:00'
              created_at: '2019-06-07T00:06:52+00:00'
              updated_at: '2019-06-07T20:47:32+00:00'
    StoreNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
          example:
            success: false
            message: 'Not found store with id: shop_20'
    Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
          example:
            success: true
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
