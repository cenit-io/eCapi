openapi: 3.0.0
info:
  version: v1
  title: OMNA Commerce API
  termsOfService: 'https://cenit.io/terms'
  contact:
    email: hello@omna.io
    url: 'https://cenitio.slack.com/messages/support'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: omna_logo.png
  description: >
    # Introduction

    The OMNA Commerce API is simple connection point to integrate multiple sales channels, such us 
    marketplaces and integration platforms.
    
    An easy way to get orders, synchronize inventory and list product information to commerce solutions around the globe.

    We are starting for marketplaces in Southeast Asia (Shopee, Lazada) but we will continue to make it global.

    It is built on top of an integration platform https://cenit.io

    This API is for individual retailers, SaaS services, or any business that needs to handle multiples commerce integrations.

    * is built over REST services on HTTPS.

    * It has predictable resource URLs.

    * It returns HTTP response codes to indicate errors.

    * It accepts and returns JSON in the HTTP body.

    * You can use your favorite HTTP/REST library for your programming language
    to use OMNA Commerce API.

tags:
  - name: Integrations
    description: |
      The term integration refers to resource set on which is possible operate, updated with the latest information,
      and consolidating information into a single processing workflow.

      The available integrations are Lazada, Shopee.

  - name: Orders
    description: |
      Operations about the orders

  - name: Products
    description: |
      Operations about the products.

  - name: Products Integrations
    description: |
      Operations about the products of an Integration.

  - name: Variants
    description: |
      Operations about the product variants.

  - name: Variants Integrations
    description: |
      Operations about the product variants of an Integration.

  - name: Flows
    description: >
      Operations about the flows.

      The flows allow to user configure a set of predetermined tasks to run on an integration. These tasks can be
      executed manually or automated through the configuration and activation of their schedulers. For example,
      the user can want to receive products form an integration 1 and orders form another integration.

  - name: Tasks
    description: |
      Each of the actions that make up the api generate one or more tasks when are process. In the details of the task
      we can find information about the processing triggered by the action like status, fulfillment %, notifications, etc.

  - name: Webhooks
    description: |
      A webhook is a hook through which a notification is sent to a URL of user choice when a certain event occurs.
      They allow to receive real-time HTTP notifications of changes to specific objects. Webhooks facilitate syncing
      and relaying data between two endpoints.

      ### Anatomy of a webhook

      After you configure a webhook subscription, the events that you specified will trigger a webhook notification
      each time they occur. This notification contains a JSON payload and and HTTP headers that provide context.
      For example, the order/updated webhook includes the following headers:

      - **X-Tenant-Id**: 5cfe690b25d9854b3b02241b,
      - **X-Topic**: order/updated,
      - **X-API-Version**: v1
      - **X-HMac-Sha256**: d24c9128362b0518f9ca2bf767b4a60a59aefe0f63ebeb7d47ec594442fc7a8f

      Some HTTP headers are particularly useful for your app:

      - **X-Topic** represents the type of object and the event that occurred.
      - **X-HMac-Sha256** and **X-Tenant-Id** are used to verify webhooks.
      - **X-API-Version** is used to confirm what version of the API used to serialize the webhook event payload.

      ### Verifying webhooks

      Webhooks created through the API are verified by calculating a digital signature. Each webhook request includes
      **X-HMac-Sha256** header, which is generated using the tenant shared secret along with the data sent in the request.

      To verify that the request came from OMNA, compute the **HMAC** digest according to the following algorithm and
      compare it to the value in the **X-HMac-Sha256** header. If they match, then you can be sure that the webhook was
      sent from OMNA.

      **The following Ruby example apply to Sinatra or RoR web frameworks to verify a webhook request:**

      ```Ruby
        require 'openssl'

        request.body.rewind
        body = request.body.read

        secret = '...' # Get this from tenant with equal to **X-Tenant-Id** header.

        hmac1 = request.headers['X-HMac-Sha256']
        hmac2 = OpenSSL::HMAC.hexdigest('sha256', secret, body)

        raise 'The request is not valid...' if hmac1 != hmac2
      ```

  - name: Users
    description: |
      User represent a person or a company, it is a user in Cenit System.

servers:
  - url: 'https://cenit.io/app/ecapi-v1'

security:
  - Token: []
    Timestamp: []
    HMac: []